<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Patient Dashboard</title>
  <link rel="stylesheet" href="/make-a-call-patient.css">
</head>
<body>
  <div class="container">
    <h1>Patient Dashboard</h1>

    <div class="dashboard">
      <!-- Sidebar Navigation -->
      <nav class="sidebar">
        <ul>
          <li class="active" data-target="about-service-section">
            <span class="icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 4h18v16H3z" />
                <line x1="12" y1="2" x2="12" y2="22" />
              </svg>
            </span>
            <span class="label">About Service</span>
          </li>
          <li data-target="start-consultation-section">
            <span class="icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10" />
                <line x1="12" y1="8" x2="12" y2="16" />
                <line x1="8" y1="12" x2="16" y2="12" />
              </svg>
            </span>
            <span class="label">Start Consultation</span>
          </li>
          <li data-target="appointments-section">
            <span class="icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2" />
                <line x1="16" y1="2" x2="16" y2="6" />
                <line x1="8" y1="2" x2="8" y2="6" />
                <line x1="3" y1="10" x2="21" y2="10" />
              </svg>
            </span>
            <span class="label">My Appointments</span>
          </li>
          <li data-target="messages-section">
            <span class="icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z" />
              </svg>
            </span>
            <span class="label">Messages</span>
          </li>
        </ul>
      </nav>

      <!-- Main Content Area -->
      <div class="content-area">
        <!-- About Service Section -->
        <section id="about-service-section" class="dashboard-section active">
          <h2>About the Service</h2>
          <p>
            Welcome to our medical consultation platform. Here, you can connect with specialists
            who will guide you through your health concerns with personalized care.
          </p>
          <p>
            Our service ensures seamless, secure, and private interactions with qualified professionals.
          </p>
        </section>

        <!-- Start Consultation Section -->
        <section id="start-consultation-section" class="dashboard-section hidden">
          <h1>Start Consultation</h1>
          <p>Connect with a medical specialist</p>
          
          <div class="select-container">
            <select id="doctorSelect">
              <option value="">Select a Doctor</option>
            </select>
          </div>
          
          <button id="makeCall">Make a Call</button>
          
          <div class="waiting-message" id="waitingMessage">
            Waiting for doctor to accept the call...
          </div>
          
          <div id="video-container">
            <iframe id="jitsi-frame" allow="camera; microphone; fullscreen" frameborder="0"></iframe>
          </div>
        </section>

        <!-- My Appointments Section -->
        <section id="appointments-section" class="dashboard-section hidden">
          <h2>My Appointments</h2>
          <div class="appointments-container">
            <ul id="appointments-list">
              <li>
                <div class="appointment-details">
                  <strong>Dr. Smith</strong> - 12/01/2024, 10:00 AM
                </div>
              </li>
            </ul>
          </div>
        </section>

        <!-- Messages Section -->
        <section id="messages-section" class="dashboard-section hidden">
          <h2>Messages</h2>
          <div class="messages-wrapper">
            <!-- Doctors List -->
            <div id="doctors-list" class="contacts-list">
              <!-- Template for doctor items -->
              <template id="doctor-template">
                <div class="contact-item" data-doctor-id="">
                  <div class="contact-avatar"></div>
                  <div class="contact-details">
                    <span class="contact-name"></span>
                    <span class="contact-specialisation"></span>
                  </div>
                </div>
              </template>
            </div>

            <!-- Chat Window -->
            <div id="chat-window" class="chat-window">
              <div id="chat-header" class="chat-header">
                <div id="selected-doctor-name" class="chat-doctor-name">
                  Select a contact to start chatting
                </div>
              </div>
              <div id="messages-container">
                <div class="messages-list" id="messages-list">
                  <!-- Messages will be populated dynamically -->
                </div>
                <div class="message-input-container">
                  <div class="input-wrapper">
                    <textarea 
                      id="message-input" 
                      placeholder="Type your message..."
                      class="message-textarea"
                      rows="1"
                    ></textarea>
                    <button id="send-message" class="send-message-btn" disabled>
                      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z"/>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

      </div>
    </div>
  </div>

  <script>
    const socket = new WebSocket(`ws://${window.location.host}`);
    const makeCallBtn = document.getElementById('makeCall');
    const waitingMessage = document.getElementById('waitingMessage');
    const doctorSelect = document.getElementById('doctorSelect');
    const messageDoctorSelect = document.getElementById('messageDoctorSelect');
    const videoContainer = document.getElementById('video-container');
    const jitsiFrame = document.getElementById('jitsi-frame');
    
    async function loadDoctors() {
      try {
        const response = await fetch('/available-doctors');
        const doctors = await response.json();
        
        doctors.forEach(doctor => {
          const option = document.createElement('option');
          option.value = doctor.id;
          option.textContent = `${doctor.full_name} - ${doctor.specialisation}`;
          doctorSelect.appendChild(option);

          // Also add to message doctor select
          const messageOption = option.cloneNode(true);
          messageDoctorSelect.appendChild(messageOption);
        });
      } catch (error) {
        console.error('Error loading doctors:', error);
      }
    }

    loadDoctors();
    
    socket.onopen = () => {
      socket.send(JSON.stringify({
        type: 'register',
        userId: '<%= user ? user.id : "" %>'
      }));
    };
    
    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === 'call-accepted') {
        // Hide only the selection and call controls
        document.querySelector('#start-consultation-section h1').style.display = 'none';
        document.querySelector('#start-consultation-section p').style.display = 'none';
        doctorSelect.style.display = 'none';
        makeCallBtn.style.display = 'none';
        waitingMessage.classList.remove('show');

        // Setup and show video container
        const iframeSrc = `https://meet.jit.si/${data.roomName}`;
        jitsiFrame.src = iframeSrc;
        videoContainer.classList.add('show');
        
        // Ensure the start-consultation-section remains visible
        document.getElementById("start-consultation-section").style.display = 'block';
      }
    };

    makeCallBtn.addEventListener("click", async () => {
      const selectedDoctorId = doctorSelect.value;
      
      if (!selectedDoctorId) {
        alert('Please select a doctor first');
        return;
      }

      makeCallBtn.disabled = true;
      doctorSelect.disabled = true;
      waitingMessage.classList.add('show');

      socket.send(JSON.stringify({
        type: 'start-call',
        patientId: '<%= user ? user.id : "" %>',
        doctorId: selectedDoctorId,
        fullName: '<%= user ? user.full_name : "" %>'
      }));
    });

    // Send message
    document.getElementById('send-message').addEventListener('click', () => {
      const selectedDoctorId = messageDoctorSelect.value;
      const input = document.getElementById('message-input');
      const content = input.value.trim();
      
      if (!selectedDoctorId) {
        alert('Please select a doctor to message');
        return;
      }

      if (content) {
        socket.send(JSON.stringify({
          type: 'send-message',
          senderId: '<%= user ? user.id : "" %>',
          receiverId: selectedDoctorId,
          content: content
        }));
        
        // Add message to UI
        const messagesList = document.getElementById('messages-list');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item sent';
        messageDiv.innerHTML = `
          <div class="message-header">
            <div class="message-sender">You</div>
            <div class="message-time">${new Date().toLocaleString()}</div>
          </div>
          <div class="message-content">${content}</div>
        `;
        messagesList.appendChild(messageDiv);
        
        input.value = '';
      }
    });

    // Sidebar navigation functionality
    document.querySelectorAll(".sidebar li").forEach(item => {
      item.addEventListener("click", () => {
        document.querySelectorAll(".sidebar li").forEach(li => li.classList.remove("active"));
        item.classList.add("active");

        document.querySelectorAll(".dashboard-section").forEach(section => {
          section.classList.add("hidden");
        });
        const targetId = item.getAttribute("data-target");
        document.getElementById(targetId).classList.remove("hidden");
      });
    });

    async function loadDoctorsList() {
      try {
        const response = await fetch('/available-doctors');
        const doctors = await response.json();
        const doctorsList = document.getElementById('doctors-list');
        const template = document.getElementById('doctor-template');
        
        doctors.forEach(doctor => {
          const clone = template.content.cloneNode(true);
          const item = clone.querySelector('.contact-item');
          
          item.setAttribute('data-doctor-id', doctor.id);
          item.querySelector('.contact-avatar').textContent = doctor.full_name.charAt(0);
          item.querySelector('.contact-name').textContent = doctor.full_name;
          item.querySelector('.contact-specialisation').textContent = doctor.specialisation;
          
          item.addEventListener('click', () => selectDoctor(doctor));
          doctorsList.appendChild(item);
        });
      } catch (error) {
        console.error('Error loading doctors list:', error);
      }
    }

    let selectedDoctorId = null;

    function selectDoctor(doctor) {
      selectedDoctorId = doctor.id;
      
      // Remove active class from all contacts
      document.querySelectorAll('.contact-item').forEach(item => {
        item.classList.remove('active');
      });
      
      // Add active class to selected contact
      const selectedItem = document.querySelector(`[data-doctor-id="${doctor.id}"]`);
      if (selectedItem) {
        selectedItem.classList.add('active');
      }
      
      // Update chat header
      document.getElementById('selected-doctor-name').textContent = doctor.full_name;
      
      // Enable send button
      document.getElementById('send-message').disabled = false;
      
      // Load message history for this doctor
      loadMessagesForDoctor(doctor.id);
    }

    async function loadMessagesForDoctor(doctorId) {
      try {
        const response = await fetch(`/messages/<%= user.id %>`);
        const messages = await response.json();
        
        const messagesList = document.getElementById('messages-list');
        messagesList.innerHTML = messages
          .filter(msg => msg.sender_id === doctorId || msg.receiver_id === doctorId)
          .map(msg => `
            <div class="message-item ${msg.sender_id === '<%= user.id %>' ? 'sent' : 'received'}">
              <div class="message-header">
                <div class="message-sender">${msg.sender_id === '<%= user.id %>' ? 'You' : msg.sender_name}</div>
                <div class="message-time">${new Date(msg.timestamp).toLocaleString()}</div>
              </div>
              <div class="message-content">${msg.content}</div>
            </div>
          `).join('');
        
        messagesList.scrollTop = messagesList.scrollHeight;
      } catch (error) {
        console.error('Error loading messages:', error);
      }
    }

    // Update the send message event listener
    document.getElementById('send-message').addEventListener('click', () => {
      const input = document.getElementById('message-input');
      const content = input.value.trim();
      
      if (!selectedDoctorId) {
        alert('Please select a doctor to message');
        return;
      }

      if (content) {
        socket.send(JSON.stringify({
          type: 'send-message',
          senderId: '<%= user.id %>',
          receiverId: selectedDoctorId,
          content: content
        }));
        
        // Add message to UI
        const messagesList = document.getElementById('messages-list');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item sent';
        messageDiv.innerHTML = `
          <div class="message-header">
            <div class="message-sender">You</div>
            <div class="message-time">${new Date().toLocaleString()}</div>
          </div>
          <div class="message-content">${content}</div>
        `;
        messagesList.appendChild(messageDiv);
        messagesList.scrollTop = messagesList.scrollHeight;
        
        input.value = '';
      }
    });

    // Handle incoming messages
    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);
      
      if (data.type === 'receive-message') {
        const messagesList = document.getElementById('messages-list');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item received';
        messageDiv.innerHTML = `
          <div class="message-header">
            <div class="message-sender">${data.senderName}</div>
            <div class="message-time">${new Date(data.timestamp).toLocaleString()}</div>
          </div>
          <div class="message-content">${data.content}</div>
        `;
        messagesList.appendChild(messageDiv);
        messagesList.scrollTop = messagesList.scrollHeight;
      }
    };

    // Call this function after page load
    loadDoctorsList();
  </script>
</body>
</html>
