<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Make a Call</title>
  <link rel="icon" href="/images/doctor-logo.jpg" type="image/png">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="make-a-call-patient.css">
</head>
<body>
  <div class="container">
    <!-- Service section -->
    <div class="welcome-text">
      <h1>Consultation with Medical Specialist</h1>
      <p>To get in touch with the Medical Specialist, initiate the call here.</p>
      <!-- Button to start the call -->
      <div class="buttons">
        <button id="makeCall">Make a Call</button>
      </div>
    </div>

    <!-- Video container (hidden initially) -->
    <div id="video-container" class="hidden">
      <iframe id="video-frame" width="800" height="600" allow="camera; microphone; fullscreen" frameborder="0"></iframe>
    </div>
  </div>

  <script src="https://sdk.twilio.com/js/video/releases/2.18.0/twilio-video.min.js"></script>
  <script>
    const makeCallButton = document.getElementById('makeCall');
    const videoContainer = document.getElementById('video-container');
    const videoFrame = document.getElementById('video-frame');

    makeCallButton.addEventListener('click', async () => {
      try {
        // Start a call by creating a video room
        const response = await fetch('/start-call', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ service: 'Surgery Specialist' }),
        });

        const data = await response.json();

        if (data.success) {
          const roomSid = data.roomSid;
          await joinRoom(roomSid);
        } else {
          alert('Failed to initiate the call. Please try again.');
        }
      } catch (error) {
        console.error('Error initiating call:', error);
        alert('An error occurred while initiating the call.');
      }
    });

    async function joinRoom(roomSid) {
      try {
        // Get a token for joining the room
        const response = await fetch(`/get-token?roomSid=${roomSid}`);
        const data = await response.json();

        if (data.success) {
          const token = data.token;

          // Connect to the room
          const room = await Twilio.Video.connect(token, { room: roomSid });

          console.log(`Successfully connected to room: ${room.name}`);
          videoContainer.classList.remove('hidden');

          // Attach participant tracks to the video container
          room.participants.forEach(participant => attachParticipantTracks(participant));
          room.on('participantConnected', participant => attachParticipantTracks(participant));
          room.on('participantDisconnected', detachParticipantTracks);
        } else {
          alert('Failed to get the token.');
        }
      } catch (error) {
        console.error('Error joining room:', error);
        alert('An error occurred while joining the video call.');
      }
    }

    function attachParticipantTracks(participant) {
      participant.tracks.forEach(publication => {
        if (publication.track) {
          videoContainer.appendChild(publication.track.attach());
        }
      });
    }

    function detachParticipantTracks(participant) {
      participant.tracks.forEach(publication => {
        if (publication.track) {
          publication.track.detach().forEach(element => element.remove());
        }
      });
    }
  </script>
</body>
</html>
