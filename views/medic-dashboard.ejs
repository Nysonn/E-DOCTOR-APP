<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Doctor Dashboard</title>
  <link rel="stylesheet" href="/medic-dashboard.css">
  <!-- <meta http-equiv="Content-Security-Policy" content="frame-src 'self' https://meet.jit.si"> -->
</head>
<body>
  <div class="container">
    <h1>Doctor Dashboard</h1>
    
    <div class="dashboard">
      
      <!-- Call Container (Report Form + Video) -->
      <div id="call-container" class="call-container hidden">
        <!-- Report Form with Toggle Button -->
        <div id="report-section" class="report-section">
          <button id="toggle-report" class="toggle-report">
            <span class="toggle-icon">◀</span>
          </button>
          <div class="report-form">
            <form id="patient-report-form" action="/save-report" method="POST">
              <h2>Patient Report</h2>
              <label for="patientName">Patient Name:</label>
              <input type="text" id="patientName" name="patientName" required />

              <label for="symptoms">Symptoms:</label>
              <textarea id="symptoms" name="symptoms" required></textarea>

              <label for="diagnosis">Diagnosis:</label>
              <textarea id="diagnosis" name="diagnosis" required></textarea>

              <label for="prescribedMedication">Prescribed Medication:</label>
              <textarea id="prescribedMedication" name="prescribedMedication"></textarea>

              <label for="additionalNotes">Additional Notes:</label>
              <textarea id="additionalNotes" name="additionalNotes"></textarea>

              <input type="hidden" name="userId" value="<%= user.id %>" />
              <button type="submit">Save Report</button>
            </form>
          </div>
        </div>

         <!-- Incoming Calls Section -->
      <div class="incoming-calls">
        <h2>Incoming Calls</h2>
        <ul id="calls-list">
          <!-- Calls will be dynamically added here -->
        </ul>
        <div class="default-message" id="defaultMessage">
          Waiting for incoming calls...
        </div>
      </div>

        <!-- Video Container -->
        <div id="video-container" class="hidden">
          <iframe 
            id="jitsi-frame" 
            allow="camera; microphone; fullscreen; display-capture" 
            frameborder="0"
            style="width: 100%; height: 100%;"
          ></iframe>
        </div>
      </div>
    </div>

    <div class="call-buttons">
      <button id="accept-call">Accept Call</button>
      <button id="decline-call">Decline Call</button>
    </div>
  </div>

  <script>
    const socket = new WebSocket(`ws://${window.location.host}`);
    const defaultMessage = document.getElementById('defaultMessage');
    const callButtons = document.querySelector('.call-buttons');
    
    socket.onopen = () => {
      socket.send(JSON.stringify({
        type: 'register',
        userId: '<%= user ? user.id : "" %>'
      }));
    };
    
    const toggleReportBtn = document.getElementById('toggle-report');
    const reportSection = document.getElementById('report-section');
    const callContainer = document.getElementById('call-container');
    
    toggleReportBtn.addEventListener('click', () => {
      reportSection.classList.toggle('minimized');
      toggleReportBtn.querySelector('.toggle-icon').textContent = 
        reportSection.classList.contains('minimized') ? '▶' : '';
    });

    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === 'incoming-call') {
        // Create new caller card
        const callsList = document.getElementById('calls-list');
        const callerCard = document.createElement('li');
        callerCard.className = 'caller-card';
        callerCard.id = `caller-${data.patientId}`;

        // Get first letter of patient name for avatar
        const patientInitial = data.patientName ? data.patientName.charAt(0).toUpperCase() : 'P';

        callerCard.innerHTML = `
          <div class="caller-info">
            <div class="caller-avatar">${patientInitial}</div>
            <span class="caller-name">${data.patientName || 'Patient'} ${data.patientId}</span>
          </div>
          <div class="caller-actions">
            <button class="accept-btn" onclick="acceptCall('${data.patientId}', '${data.roomName}')">
              Accept
            </button>
            <button class="decline-btn" onclick="declineCall('${data.patientId}')">
              Decline
            </button>
          </div>
        `;

        callsList.prepend(callerCard);
      }
    };

    function acceptCall(patientId, roomName) {
      // Remove the caller card
      document.getElementById(`caller-${patientId}`).remove();
      
      // Send accept message to server
      socket.send(JSON.stringify({
        type: 'accept-call',
        patientId: patientId
      }));
      
      // Setup video call
      const iframeSrc = `https://meet.jit.si/${roomName}`;
      const jitsiFrame = document.getElementById("jitsi-frame");
      jitsiFrame.src = iframeSrc;
      
      // Show video container and report section
      const videoContainer = document.getElementById('video-container');
      const reportSection = document.getElementById('report-section');
      
      // Add active class to video container and report section
      videoContainer.classList.remove('hidden');
      videoContainer.classList.add('active');
      reportSection.classList.add('active');
      
      // Hide incoming calls if no more calls
      const callsList = document.getElementById('calls-list');
      if (callsList.children.length === 0) {
        document.querySelector('.incoming-calls').style.display = 'none';
      }
      
      // Hide default message
      document.getElementById('defaultMessage').style.display = 'none';
    }

    async function declineCall(patientId) {
      try {
        const response = await fetch("/decline-call", {
          method: "POST",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ patientId })
        });
        
        const result = await response.json();
        if (result.success) {
          document.getElementById(`caller-${patientId}`).remove();
          
          // Show default message if no more calls
          const callsList = document.getElementById('calls-list');
          if (callsList.children.length === 0) {
            document.getElementById('defaultMessage').style.display = 'block';
          }
        } else {
          alert("Failed to decline call.");
        }
      } catch (error) {
        console.error('Error declining call:', error);
        alert('Error declining call.');
      }
    }

    // Handle form submission
    document.getElementById("patient-report-form").addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const formObject = Object.fromEntries(formData.entries());

      try {
        const response = await fetch('/save-report', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formObject),
        });

        if (response.ok) {
          alert('Report saved successfully!');
          e.target.reset();
        } else {
          alert('Failed to save report.');
        }
      } catch (error) {
        console.error('Error saving report:', error);
        alert('Error saving report.');
      }
    });
  </script>
</body>
</html>
