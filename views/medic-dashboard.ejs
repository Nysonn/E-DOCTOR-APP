<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Doctor Dashboard</title>
  <link rel="stylesheet" href="/medic-dashboard.css">
  <!-- <meta http-equiv="Content-Security-Policy" content="frame-src 'self' https://meet.jit.si"> -->
</head>
<body>
  <div class="container">
    <h1>Doctor Dashboard</h1>
    
    <div class="dashboard">
      <!-- Add Sidebar Navigation -->
      <nav class="sidebar">
        <ul>
          <li class="active" data-target="calls-section">
            <span class="icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"/>
              </svg>
            </span>
            <span class="label">Calls</span>
          </li>
          <li data-target="messages-section">
            <span class="icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z"/>
              </svg>
            </span>
            <span class="label">Messages</span>
          </li>
          <li data-target="appointments-section">
            <span class="icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
                <line x1="16" y1="2" x2="16" y2="6"/>
                <line x1="8" y1="2" x2="8" y2="6"/>
                <line x1="3" y1="10" x2="21" y2="10"/>
              </svg>
            </span>
            <span class="label">Appointments</span>
          </li>
          <li data-target="history-section">
            <span class="icon">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                <polyline points="14 2 14 8 20 8"/>
                <line x1="16" y1="13" x2="8" y2="13"/>
                <line x1="16" y1="17" x2="8" y2="17"/>
                <polyline points="10 9 9 9 8 9"/>
              </svg>
            </span>
            <span class="label">History</span>
          </li>
        </ul>
      </nav>

      <!-- Main Content Area -->
      <div class="content-area">
        <!-- Calls Section (Your existing call-container) -->
        <section id="calls-section" class="dashboard-section active">
          <!-- Your existing call-container content -->
          <div id="call-container" class="call-container">
            <!-- Report Form with Toggle Button -->
            <div id="report-section" class="report-section">
              <button id="toggle-report" class="toggle-report">
                <span class="toggle-icon">â—€</span>
              </button>
              <div class="report-form">
                <form id="patient-report-form" action="/save-report" method="POST">
                  <h2>Patient Report</h2>
                  <label for="patientName">Patient Name:</label>
                  <input type="text" id="patientName" name="patientName" required />

                  <label for="symptoms">Symptoms:</label>
                  <textarea id="symptoms" name="symptoms" required></textarea>

                  <label for="diagnosis">Diagnosis:</label>
                  <textarea id="diagnosis" name="diagnosis" required></textarea>

                  <label for="prescribedMedication">Prescribed Medication:</label>
                  <textarea id="prescribedMedication" name="prescribedMedication"></textarea>

                  <label for="additionalNotes">Additional Notes:</label>
                  <textarea id="additionalNotes" name="additionalNotes"></textarea>

                  <input type="hidden" name="userId" value="<%= user.id %>" />
                  <button type="submit">Save Report</button>
                </form>
              </div>
            </div>

             <!-- Incoming Calls Section -->
            <div class="incoming-calls" id="incoming-calls">
              <h2>Incoming Calls</h2>
              <ul id="calls-list">
                <!-- Calls will be dynamically added here -->
              </ul>
              <div class="default-message" id="defaultMessage">
                Waiting for incoming calls...
              </div>
            </div>

              <!-- Video Container -->
              <div id="video-container" class="hidden">
                <iframe 
                  id="jitsi-frame" 
                  allow="camera; microphone; fullscreen; display-capture" 
                  frameborder="0"
                  style="width: 100%; height: 100%;"
                ></iframe>
              </div>
            </div>
          </section>


        <!-- Messages Section -->
         <section id="messages-section" class="dashboard-section hidden">
          <h2>Patient Messages</h2>
          <div class="messages-wrapper">
            <!-- Patients List -->
            <div id="patients-list" class="contacts-list">
              <!-- Template for patient items -->
              <template id="patient-template">
                <div class="contact-item" data-patient-id="">
                  <div class="contact-avatar"></div>
                  <div class="contact-details">
                    <span class="contact-name"></span>
                    <span class="contact-info"></span>
                  </div>
                </div>
              </template>
            </div>

            <!-- Chat Window -->
            <div id="chat-window" class="chat-window">
              <div class="chat-header">
                <div id="selected-patient-name" class="chat-patient-name">
                  Select a patient to start chatting
                </div>
              </div>
              
              <div id="messages-container">
                <div class="messages-list" id="messages-list">
                  <!-- Messages will be populated dynamically -->
                </div>
                
                <div class="message-input-container">
                  <div class="input-wrapper">
                    <textarea 
                      id="message-input" 
                      placeholder="Type your message..."
                      class="message-textarea"
                      rows="1"
                    ></textarea>
                    <button id="send-message" class="send-message-btn" disabled>
                      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z"/>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

          
          <section id="appointments-section" class="dashboard-section hidden">
            <h2>Appointments</h2>
            <div class="appointments-container">
              <!-- Add Schedule Button -->
              <button id="show-appointment-form" class="schedule-btn">
                <span class="icon">+</span>
                Schedule Appointment
              </button>

              <!-- Appointment List -->
              <ul id="appointments-list">
                <li>
                  <div class="appointment-details">
                    <strong>John Doe</strong> - 12/01/2024, 10:00 AM
                  </div>
                  <div class="actions">
                    <button class="edit-btn">Edit</button>
                    <button class="delete-btn">Delete</button>
                  </div>
                </li>
                <!-- Additional appointments will populate here -->
              </ul>

              <!-- Appointment Form (hidden by default) -->
              <form class="appointment-form hidden" id="appointment-form">
                <div class="form-header">
                  <h3>New Appointment</h3>
                  <button type="button" id="close-appointment-form" class="close-btn">&times;</button>
                </div>
                
                <label for="patientName">Patient Name</label>
                <input type="text" id="patientName" name="patientName" required />
                
                <label for="appointmentDate">Date</label>
                <input type="date" id="appointmentDate" name="appointmentDate" required />
                
                <label for="appointmentTime">Time</label>
                <input type="time" id="appointmentTime" name="appointmentTime" required />
                
                <label for="notes">Additional Notes</label>
                <textarea id="notes" name="notes" rows="3"></textarea>
                
                <button type="submit">Schedule Appointment</button>
              </form>
            </div>
          </section>
          

          <section id="history-section" class="dashboard-section hidden">
            <h2>Medical History</h2>
            <div class="history-container">
              <ul id="history-list"></ul>
            </div>
          </section>
        </div>
      </div>
    </div>
  </div>

  <script>
    const socket = new WebSocket(`ws://${window.location.host}`);
    const defaultMessage = document.getElementById('defaultMessage');
    const callButtons = document.querySelector('.call-buttons');
    
    socket.onopen = () => {
      socket.send(JSON.stringify({
        type: 'register',
        userId: '<%= user ? user.id : "" %>'
      }));
    };
    
    const toggleReportBtn = document.getElementById('toggle-report');
    const reportSection = document.getElementById('report-section');
    const callContainer = document.getElementById('call-container');
    
    toggleReportBtn.addEventListener('click', () => {
      reportSection.classList.toggle('minimized');
      toggleReportBtn.querySelector('.toggle-icon').textContent = 
        reportSection.classList.contains('minimized') ? 'â–¶' : '';
    });

    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === 'incoming-call') {
        const callsList = document.getElementById('calls-list');
        const callerCard = document.createElement('li');
        callerCard.className = 'caller-card';
        callerCard.id = `caller-${data.patientId}`;

        // Get first letter of patient name for avatar
        const patientInitial = data.fullName ? data.fullName.charAt(0).toUpperCase() : 'P';

        callerCard.innerHTML = `
          <div class="caller-info">
            <div class="caller-avatar">${patientInitial}</div>
            <span class="caller-name">${data.fullName || 'Unknown Patient'}</span>
          </div>
          <div class="caller-actions">
            <button class="accept-btn" onclick="acceptCall('${data.patientId}', '${data.roomName}')">
              Accept
            </button>
            <button class="decline-btn" onclick="declineCall('${data.patientId}')">
              Decline
            </button>
          </div>
        `;

        callsList.prepend(callerCard);
      }
    };

    function acceptCall(patientId, roomName) {
      // Remove the caller card
      document.getElementById(`caller-${patientId}`).remove();
      
      // Send accept message to server
      socket.send(JSON.stringify({
        type: 'accept-call',
        patientId: patientId
      }));
      
      // Setup video call
      const iframeSrc = `https://meet.jit.si/${roomName}`;
      const jitsiFrame = document.getElementById("jitsi-frame");
      jitsiFrame.src = iframeSrc;
      
      // Show video container and report section
      const videoContainer = document.getElementById('video-container');
      const reportSection = document.getElementById('report-section');
      
      // Add active class to video container and report section
      videoContainer.classList.remove('hidden');
      videoContainer.classList.add('active');
      reportSection.classList.add('active');
      
      // Hide incoming calls if no more calls
      const callsList = document.getElementById('calls-list');
      if (callsList.children.length === 0) {
        document.querySelector('.incoming-calls').style.display = 'none';
      }
      
      // Hide default message
      document.getElementById('defaultMessage').style.display = 'none';
    }

    async function declineCall(patientId) {
      try {
        const response = await fetch("/decline-call", {
          method: "POST",
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ patientId })
        });
        
        const result = await response.json();
        if (result.success) {
          document.getElementById(`caller-${patientId}`).remove();
          
          // Show default message if no more calls
          const callsList = document.getElementById('calls-list');
          if (callsList.children.length === 0) {
            document.getElementById('defaultMessage').style.display = 'block';
          }
        } else {
          alert("Failed to decline call.");
        }
      } catch (error) {
        console.error('Error declining call:', error);
        alert('Error declining call.');
      }
    }

    // Handle form submission
    document.getElementById("patient-report-form").addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const formObject = Object.fromEntries(formData.entries());

      try {
        const response = await fetch('/save-report', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formObject),
        });

        if (response.ok) {
          alert('Report saved successfully!');
          e.target.reset();
        } else {
          alert('Failed to save report.');
        }
      } catch (error) {
        console.error('Error saving report:', error);
        alert('Error saving report.');
      }
    });

    // Add sidebar navigation functionality
    document.querySelectorAll(".sidebar li").forEach(item => {
      item.addEventListener("click", () => {
        // Update active state
        document.querySelectorAll(".sidebar li").forEach(li => li.classList.remove("active"));
        item.classList.add("active");
        
        // Show/hide sections
        document.querySelectorAll(".dashboard-section").forEach(section => {
          section.classList.add("hidden");
        });
        const targetId = item.getAttribute("data-target");
        document.getElementById(targetId).classList.remove("hidden");
      });
    });

    // Form toggle functionality
    document.getElementById('show-appointment-form').addEventListener('click', () => {
      document.getElementById('appointment-form').classList.remove('hidden');
      document.getElementById('show-appointment-form').classList.add('hidden');
    });

    document.getElementById('close-appointment-form').addEventListener('click', () => {
      document.getElementById('appointment-form').classList.add('hidden');
      document.getElementById('show-appointment-form').classList.remove('hidden');
    });

    // Handle form submission
    document.getElementById('appointment-form').addEventListener('submit', (e) => {
      e.preventDefault();
      // Add your form submission logic here
      
      // After successful submission, hide form and show schedule button
      document.getElementById('appointment-form').classList.add('hidden');
      document.getElementById('show-appointment-form').classList.remove('hidden');
    });

    // Load message history
    async function loadMessages() {
      try {
        const response = await fetch(`/messages/${user.id}`);
        const messages = await response.json();
        
        const messagesList = document.getElementById('messages-list');
        messagesList.innerHTML = messages.map(msg => `
          <div class="message-item ${msg.sender_id === user.id ? 'sent' : 'received'}">
            <div class="message-header">
              <div class="message-sender">${msg.sender_name}</div>
              <div class="message-time">${new Date(msg.timestamp).toLocaleString()}</div>
            </div>
            <div class="message-content">${msg.content}</div>
          </div>
        `).join('');
      } catch (error) {
        console.error('Error loading messages:', error);
      }
    }

    // Handle incoming messages
    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);
      
      if (data.type === 'receive-message') {
        const messagesList = document.getElementById('messages-list');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item received';
        messageDiv.innerHTML = `
          <div class="message-header">
            <div class="message-sender">${data.senderName}</div>
            <div class="message-time">${new Date(data.timestamp).toLocaleString()}</div>
          </div>
          <div class="message-content">${data.content}</div>
        `;
        messagesList.prepend(messageDiv);
      }
    };

    // Send message
    document.getElementById('send-message').addEventListener('click', () => {
      const input = document.getElementById('message-input');
      const content = input.value.trim();
      
      if (content) {
        socket.send(JSON.stringify({
          type: 'send-message',
          senderId: user.id,
          receiverId: activePatientId, // You'll need to track this
          content: content
        }));
        
        // Add message to UI
        const messagesList = document.getElementById('messages-list');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item sent';
        messageDiv.innerHTML = `
          <div class="message-header">
            <div class="message-sender">You</div>
            <div class="message-time">${new Date().toLocaleString()}</div>
          </div>
          <div class="message-content">${content}</div>
        `;
        messagesList.prepend(messageDiv);
        
        input.value = '';
      }
    });

    // Load messages when messages section is shown
    document.querySelector('[data-target="messages-section"]').addEventListener('click', loadMessages);

    let activePatientId = null; // Add this at the top to track selected patient

    async function loadPatientsList() {
      try {
        const response = await fetch('/available-patients');
        const patients = await response.json();
        
        const patientsList = document.getElementById('patients-list');
        const template = document.getElementById('patient-template');
        
        // Clear existing list
        patientsList.innerHTML = '';
        
        patients.forEach(patient => {
          const clone = template.content.cloneNode(true);
          const item = clone.querySelector('.contact-item');
          
          item.setAttribute('data-patient-id', patient.id);
          item.querySelector('.contact-avatar').textContent = patient.full_name.charAt(0).toUpperCase();
          item.querySelector('.contact-name').textContent = patient.full_name;
          // item.querySelector('.contact-info').textContent = `Age: ${patient.age} | ${patient.residence}`;
          
          item.addEventListener('click', () => selectPatient(patient));
          patientsList.appendChild(item);
        });
      } catch (error) {
        console.error('Error loading patients list:', error);
      }
    }

    function selectPatient(patient) {
      // Update active patient ID
      activePatientId = patient.id;
      
      // Remove active class from all contacts
      document.querySelectorAll('.contact-item').forEach(item => {
        item.classList.remove('active');
      });
      
      // Add active class to selected contact
      const selectedItem = document.querySelector(`[data-patient-id="${patient.id}"]`);
      if (selectedItem) {
        selectedItem.classList.add('active');
      }
      
      // Update chat header
      document.getElementById('selected-patient-name').textContent = patient.full_name;
      
      // Enable send button
      document.getElementById('send-message').disabled = false;
      
      // Load messages for this patient
      loadMessagesForPatient(patient.id);
    }

    async function loadMessagesForPatient(patientId) {
      try {
        const response = await fetch(`/messages/${patientId}`);
        const messages = await response.json();
        
        const messagesList = document.getElementById('messages-list');
        messagesList.innerHTML = messages.map(msg => `
          <div class="message-item ${msg.sender_id === '<%= user.id %>' ? 'sent' : 'received'}">
            <div class="message-header">
              <div class="message-sender">${msg.sender_id === '<%= user.id %>' ? 'You' : msg.sender_name}</div>
              <div class="message-time">${new Date(msg.timestamp).toLocaleString()}</div>
            </div>
            <div class="message-content">${msg.content}</div>
          </div>
        `).join('');
        
        // Scroll to bottom of messages
        messagesList.scrollTop = messagesList.scrollHeight;
      } catch (error) {
        console.error('Error loading messages:', error);
      }
    }

    // Update the messages section click handler to load patients list
    document.querySelector('[data-target="messages-section"]').addEventListener('click', () => {
      loadPatientsList();
    });

    // Update the send message event listener to use activePatientId
    document.getElementById('send-message').addEventListener('click', () => {
      const input = document.getElementById('message-input');
      const content = input.value.trim();
      
      if (!activePatientId) {
        alert('Please select a patient to message');
        return;
      }

      if (content) {
        socket.send(JSON.stringify({
          type: 'send-message',
          senderId: '<%= user.id %>',
          receiverId: activePatientId,
          content: content
        }));
        
        // Add message to UI
        const messagesList = document.getElementById('messages-list');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message-item sent';
        messageDiv.innerHTML = `
          <div class="message-header">
            <div class="message-sender">You</div>
            <div class="message-time">${new Date().toLocaleString()}</div>
          </div>
          <div class="message-content">${content}</div>
        `;
        messagesList.prepend(messageDiv);
        
        input.value = '';
      }
    });

    // Call loadPatientsList when the page loads if messages section is active
    if (document.getElementById('messages-section').classList.contains('active')) {
      loadPatientsList();
    }
  </script>
</body>
</html>
